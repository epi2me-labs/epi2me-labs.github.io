{
    "componentChunkName": "component---packages-blog-gatsby-blog-core-src-templates-post-js",
    "path": "/workflows/wf-transcriptomes/",
    "result": {"data":{"post":{"id":"3c9aed23-1c59-512c-aaf1-a028dddc296d","title":"wf-transcriptomes documentation","slug":"/workflows/wf-transcriptomes/","link":null,"excerpt":"wf-transcriptomes This repository contains a  nextflow  workflow\nfor assembly and annotation ofâ€¦","tableOfContents":{"items":[{"url":"#wf-transcriptomes","title":"wf-transcriptomes","items":[{"url":"#introduction","title":"Introduction"},{"url":"#quickstart","title":"Quickstart"},{"url":"#workflow-outputs","title":"Workflow outputs"},{"url":"#useful-links","title":"Useful links"}]}]},"timeToRead":3,"featured":null,"protected":null,"thumbnailText":null,"date":null,"category":null,"author":{"id":"3f460450-ac65-5eba-a65d-a670c780daec","name":"EPI2ME Labs","slug":"/author/epi2me-labs/","title":"Senior Button Pusher","description":"I'm a robot. I like to publish JupyterLab tutorials, Nextflow workflows, and blog posts.","skills":["Continuous Deployment"],"social":[{"name":"Twitter","url":"https://twitter.com/nanopore"},{"name":"Website","url":"https://labs.epi2me.io"}],"thumbnail":{"__typename":"ImageSharp","ImageSharp_small":{"layout":"fixed","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='150'%20height='150'%20viewBox='0%200%20150%20150'%20preserveAspectRatio='none'%3e%3cpath%20d='M64%202C42%207%2030%2036%2044%2048c7%206%2013%207%2031%207%2015%200%2017%200%2022-2%2011-4%2015-9%2015-19%200-23-24-39-48-32m3%205c-14%204-24%2016-23%2028%201%2010%2010%2014%2031%2014%2026%200%2035-7%2029-23-4-14-22-23-37-19M52%2023c-3%202%203%208%208%208%204%200%209-4%209-6%200-3-3-4-6-2s-3%202-6%201c-2-2-4-2-5-1m31%200c-2%201-1%204%202%206%205%203%209%203%2013-1%205-4%201-8-5-4h-4c-3-2-5-2-6-1M34%2059c-2%201-1%208%201%2021%206%2036%2017%2060%2031%2067%2021%2011%2041-16%2049-67%202-14%203-21%201-21-1-1-4%200-8%201a233%20233%200%2001-74-1m7%2015c6%2045%2022%2074%2037%2069%2015-4%2025-28%2032-75%201-2%201-2-3-2-17%203-47%203-64%200h-4l2%208'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/c489ff6e3b007deccb15ccbd6b76ce51/a7a66/epi2melabs.png","srcSet":"/static/c489ff6e3b007deccb15ccbd6b76ce51/a7a66/epi2melabs.png 48w,\n/static/c489ff6e3b007deccb15ccbd6b76ce51/416a0/epi2melabs.png 96w","sizes":"48px"},"sources":[{"srcSet":"/static/c489ff6e3b007deccb15ccbd6b76ce51/a3542/epi2melabs.webp 48w,\n/static/c489ff6e3b007deccb15ccbd6b76ce51/0f66d/epi2melabs.webp 96w","type":"image/webp","sizes":"48px"}]},"width":48,"height":48},"ImageSharp_regular":{"layout":"fixed","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='150'%20height='150'%20viewBox='0%200%20150%20150'%20preserveAspectRatio='none'%3e%3cpath%20d='M64%202C42%207%2030%2036%2044%2048c7%206%2013%207%2031%207%2015%200%2017%200%2022-2%2011-4%2015-9%2015-19%200-23-24-39-48-32m3%205c-14%204-24%2016-23%2028%201%2010%2010%2014%2031%2014%2026%200%2035-7%2029-23-4-14-22-23-37-19M52%2023c-3%202%203%208%208%208%204%200%209-4%209-6%200-3-3-4-6-2s-3%202-6%201c-2-2-4-2-5-1m31%200c-2%201-1%204%202%206%205%203%209%203%2013-1%205-4%201-8-5-4h-4c-3-2-5-2-6-1M34%2059c-2%201-1%208%201%2021%206%2036%2017%2060%2031%2067%2021%2011%2041-16%2049-67%202-14%203-21%201-21-1-1-4%200-8%201a233%20233%200%2001-74-1m7%2015c6%2045%2022%2074%2037%2069%2015-4%2025-28%2032-75%201-2%201-2-3-2-17%203-47%203-64%200h-4l2%208'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/c489ff6e3b007deccb15ccbd6b76ce51/46e60/epi2melabs.png","srcSet":"/static/c489ff6e3b007deccb15ccbd6b76ce51/46e60/epi2melabs.png 150w,\n/static/c489ff6e3b007deccb15ccbd6b76ce51/d612b/epi2melabs.png 300w","sizes":"150px"},"sources":[{"srcSet":"/static/c489ff6e3b007deccb15ccbd6b76ce51/ae23d/epi2melabs.webp 150w,\n/static/c489ff6e3b007deccb15ccbd6b76ce51/bd37b/epi2melabs.webp 300w","type":"image/webp","sizes":"150px"}]},"width":150,"height":150}}},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"wf-transcriptomes documentation\",\n  \"slug\": \"workflows/wf-transcriptomes\",\n  \"author\": \"EPI2ME Labs\",\n  \"private\": true,\n  \"category\": \"Workflows\",\n  \"keywords\": [\"epi2melabs\", \"nanopore sequencing\"],\n  \"description\": \"Documentation for the wf-transcriptomes workflow.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"wf-transcriptomes\"\n  }, \"wf-transcriptomes\"), mdx(\"p\", null, \"This repository contains a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nextflow.io/\"\n  }, \"nextflow\"), \" workflow\\nfor assembly and annotation of transcripts from Oxford Nanopore cDNA or direct RNA reads.\\nIt has been adapted from two existing Snakemake pipelines:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/nanoporetech/pipeline-nanopore-ref-isoforms\"\n  }, \"https://github.com/nanoporetech/pipeline-nanopore-ref-isoforms\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/nanoporetech/pipeline-nanopore-denovo-isoforms\"\n  }, \"https://github.com/nanoporetech/pipeline-nanopore-denovo-isoforms\"))), mdx(\"h2\", {\n    \"id\": \"introduction\"\n  }, \"Introduction\"), mdx(\"p\", null, \"This workflow identifies RNA isoforms using either cDNA or direct RNA (dRNA)\\nOxford Nanopore reads.\"), mdx(\"h3\", {\n    \"id\": \"preprocesing\"\n  }, \"Preprocesing\"), mdx(\"p\", null, \"cDNA reads are initially preprocessed by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/epi2me-labs/pychopper\"\n  }, \"pychopper\"), \"\\nfor the identification of full-length reads, as well as trimming and orientation correction (This step is omitted for\\ndirect RNA reads).\"), mdx(\"h3\", {\n    \"id\": \"transcript-assembly\"\n  }, \"Transcript assembly\"), mdx(\"h4\", {\n    \"id\": \"reference-aided-transcript-assembly-approach\"\n  }, \"Reference-aided transcript assembly approach\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Full length reads are mapped to a supplied reference genome using \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/lh3/minimap2\"\n  }, \"minimap2\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transcripts are assembled by \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://ccb.jhu.edu/software/stringtie\"\n  }, \"stringtie\"), \"\\nin long read mode (with or without a guide reference annotation) to generate the GFF annotation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The annotation generated by the pipeline is compared to the reference annotation.\\nusing \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://ccb.jhu.edu/software/stringtie/gffcompare.shtml\"\n  }, \"gffcompare\"))), mdx(\"h4\", {\n    \"id\": \"de-novo-based-transcript-assembly-experimental\"\n  }, \"de novo-based transcript assembly (experimental!)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sequence clusters are generated using \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/nanoporetech/isONclust2\"\n  }, \"isONclust2\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If a reference genome is supplied, cluster quality metrics are determined by comparing\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"with clusters generated from a minimap2 alignment.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A consensus sequence for each cluster is generated using \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/rvaser/spoa\"\n  }, \"spoa\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Three rounds of polishing using racon and minimap2 to give a final polished CDS for each gene.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Full-length reads are then mapped to these polished CDS.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transcripts are assembled by stringtie as for the reference-based approach.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Note\"), \": This approach is currently not supported with direct RNA reads.\")), mdx(\"h3\", {\n    \"id\": \"fusion-gene-detection\"\n  }, \"Fusion gene detection\"), mdx(\"p\", null, \"Fusion gene detection is performed using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Oshlack/JAFFA\"\n  }, \"JAFFA\"), \", with the JAFFAL extension for use\\nwith ONT long reads. \"), mdx(\"h3\", {\n    \"id\": \"differential-expression-analysis\"\n  }, \"Differential expression analysis\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Differential expression is done using the transcripts output by the workflow.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A non redundant transcriptome is found using the merge function in \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://ccb.jhu.edu/software/stringtie\"\n  }, \"stringtie\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The reads are then aligned to the transcriptome using minimap2 in a splice-aware manner.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/COMBINE-lab/salmon\"\n  }, \"salmon\"), \" is used for transcript quantification.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"R packages \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://bioconductor.org/packages/release/bioc/html/edgeR.html\"\n  }, \"edgeR\"), \" and \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://bioconductor.org/packages/release/bioc/html/stageR.html\"\n  }, \"stageR\"), \" are used for differential expression analysis.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://bioconductor.org/packages/release/bioc/html/DEXSeq.html\"\n  }, \"DEXSeq\"), \" is then used for differential transcript usage analysis.\")), mdx(\"h3\", {\n    \"id\": \"workflow-inputs\"\n  }, \"Workflow inputs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Directory containing cDNA/direct RNA reads. Or a directory containing subdirectories each with reads from different samples\\n(in fastq/fastq.gz format)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reference genome in fasta format (required for reference-based assembly).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optional reference annotation in GFF2/3 format (required for differential expression analysis \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--de_analysis\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For fusion detection, JAFFAL reference files (see Quickstart) \")), mdx(\"h2\", {\n    \"id\": \"quickstart\"\n  }, \"Quickstart\"), mdx(\"p\", null, \"The workflow uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nextflow.io/\"\n  }, \"nextflow\"), \" to manage compute and\\nsoftware resources, as such nextflow will need to be installed before attempting\\nto run the workflow.\"), mdx(\"p\", null, \"The workflow can currently be run using either\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.docker.com/products/docker-desktop\"\n  }, \"Docker\"), \",\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://sylabs.io/singularity/\"\n  }, \"Singularity\"), \" or\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.conda.io/en/latest/miniconda.html\"\n  }, \"conda\"), \" to provide isolation of\\nthe required software. Each method is automated out-of-the-box provided\\neither docker, singularity or conda is installed.\"), mdx(\"p\", null, \"It is not required to clone or download the git repository in order to run the workflow.\\nFor more information on running EPI2ME Labs workflows \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://labs.epi2me.io/wfindex\"\n  }, \"visit out website\"), \".\"), mdx(\"h3\", {\n    \"id\": \"workflow-options\"\n  }, \"Workflow options\"), mdx(\"p\", null, \"To obtain the workflow, having installed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nextflow\"), \", users can run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"nextflow run epi2me-labs/wf-transcriptomes --help\\n\")), mdx(\"p\", null, \"to see the options for the workflow.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Download demonstration data\")), mdx(\"p\", null, \"A small test dataset is provided for the purposes of testing the workflow software. It consists of reads, reference,\\nand annotations from human chromosome 20 only.\\nIt can be downloaded using:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"wget -O test_data.tar.gz https://ont-exd-int-s3-euwst1-epi2me-labs.s3.amazonaws.com/wf-isoforms/wf-isoforms_test_data.tar.gz \\ntar -xzvf  test_data.tar.gz\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example execution of a workflow for reference-based transcript assembly and fusion detection\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"OUTPUT=~/output;\\nnexflow run epi2me-labs/wf-transcriptomes --fastq ERR6053095_chr20.fastq --ref_genome chr20/hg38_chr20.fa --ref_annotation chr20/gencode.v22.annotation.chr20.gtf \\\\\\n      --jaffal_refBase chr20/ --jaffal_genome hg38_chr20 --jaffal_annotation genCode22\\\" --out_dir outdir -w workspace_dir -profile conda -resume\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example workflow for denovo transcript assembly\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"OUTPUT=~/output\\nnextflow run . --fastq test_data/fastq --denovo --ref_genome test_data/SIRV_150601a.fasta  -profile local --out_dir ${OUTPUT} -w ${OUTPUT}/workspace \\\\\\n--sample sample_id -resume\\n\")), mdx(\"p\", null, \"A full list of options can be seen in nextflow_schema.json. Below are some commonly used ones.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Threshold for including isoforms into interactive table \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transcript_table_cov_thresh = 50\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run the denovo pipeline \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"denovo = true\"), \" (default false)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To run the workflow with direct RNA reads \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--direct_rna\"), \" (this just skips the pychopper step).\")), mdx(\"p\", null, \"Pychopper and minimap2 can take options via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minimap2_opts\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pychopper_opts\"), \", for example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When using the SIRV synthetic test data  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"minimap2_opts = '-uf --splice-flank=no'\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pychopper needs to know which cDNA synthesis kit used\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SQK-PCS109: use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pychopper_opts = '-k PCS109'\"), \" (default)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SQK-PCS110: use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pychopper_opts = '-k PCS110'\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SQK-PCS11:  use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pychopper_opts = '-k PCS111'\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pychopper can use one of two available backends for identifying primers in the raw reads\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"nhmmscan \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pychopper opts = '-m phmm'\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"edlib \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pychopper opts = '-m edlib'\"))))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": edlib is set by default in the config as it\\u2019s quite a lot faster. However, it may be less sensitive than nhmmscan. \"), mdx(\"h3\", {\n    \"id\": \"fusion-detection\"\n  }, \"Fusion detection\"), mdx(\"p\", null, \"JAFFAL from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Oshlack/JAFFA\"\n  }, \"JAFFA\"), \"\\npackage is used to identify potential fusion transcripts. To get this this working, there are a couple of things that need doing first.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Install JAFFA\")), mdx(\"p\", null, \"to install JAFFA and it\\u2019s dependencies run the folllowing:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"cd wf-transcriptomes/\\n./subworkflows/JAFFAL/install_jaffa.sh\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Prepare JAFFAL reference data\")), mdx(\"p\", null, \"To use pre-processed reference files for the hg38 genome and GENCODE v22 annotation (as used in the JFFAAL paper),\\ndo:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"mkdir jaffal_data_dir\\ncd jaffal_data_dir/\\nwf-transcriptomes/subworkflows/JAFFAL/load_jaffal_references.sh\\n\")), mdx(\"p\", null, \"To use alternative genome and annotation files, they should be prepared as described\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Oshlack/JAFFA/wiki/FAQandTroubleshooting#how-can-i-generate-the-reference-files-for-a-non-supported-genome\"\n  }, \"here\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Specifying the location of the JAFFA code and reference directories\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--jaffal_dir\"), \"\\nFull path to the directory made by running install_jaffa.sh as shown above. eg: /home/wf-trnascriptomes/JAFFA\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--jaffal_refBase\"), \"\\nThe directory containing the reference data prepared for use with JAFFAL\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JAFFAL annotation and genome files\")), mdx(\"p\", null, \"The prepared JAFFAL reference files will look something like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hg38_chr20_genCode22.fa\"), \". To enable JAFFAL to find these\\nfiles \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--jaffal_genome\"), \" should be set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hg38_chr20\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--jaffal_annotation\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"genCode22\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JAFFAL Notes\"), \":\\ng++ must be installed. JAFFAL is not currently working on Mac M1 (osx-arm64 architecture). If there are no fusion transcripts\\ndetected, the workflow will terminate with an error at the JAFFAL stage. If this happens,\\nskip the JAFFAL stage by omitting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \" --jaffal_refBase\")), mdx(\"h3\", {\n    \"id\": \"differential-expression\"\n  }, \"Differential Expression\"), mdx(\"p\", null, \"Differential Expression requires at least 2 replicates of each sample to compare. You can see an example condition_sheet.tsv in test_data.  \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example workflow for differential expression transcript assembly\")), mdx(\"p\", null, \"Download differential expression data set \"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wget -O differential_expression.tar.gz https://ont-exd-int-s3-euwst1-epi2me-labs.s3.amazonaws.com/wf-isoforms/wf-isoforms_differential_expression.tar.gz && tar -xzvf  differential_expression.tar.gz\")), mdx(\"p\", null, \"Run the cmd \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"OUTPUT=~/output;\\nnexflow run epi2me-labs/wf-transcriptomes --fastq  differential_expression_dataset/fastq --de_analysis \\\\\\n--ref_genome differential_expression_dataset/hg38_chr20.fa \\\\\\n--ref_annotation differential_expression_dataset/gencode.v22.annotation.chr20.gtf \\\\\\n--direct_rna\\n\")), mdx(\"h2\", {\n    \"id\": \"workflow-outputs\"\n  }, \"Workflow outputs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"an HTML report document detailing the primary findings of the workflow.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for each sample:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://ccb.jhu.edu/software/stringtie/gffcompare.shtml\"\n  }, \"gffcomapre\"), \" output directories\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"read_aln_stats.tsv - alignment summary statistics\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"transcriptome.fas - the assembled transcriptome\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"merged_transcritptome.fas - annotated, assembled transcriptome\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/Oshlack/JAFFA\"\n  }, \"jaffal\"), \" ooutput directories\")))), mdx(\"h3\", {\n    \"id\": \"fusion-detection-outputs\"\n  }, \"Fusion detection outputs\"), mdx(\"p\", null, \"in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${out_dir}/jaffal_output_${sample_id}\"), \" you will find:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"jaffa_results.csv - the csv results summary file \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"jaffa_results.fasta - fusion transcritpt sequences\")), mdx(\"h3\", {\n    \"id\": \"differential-expression-outputs\"\n  }, \"Differential Expression outputs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dtu_plots.pdf - a pdf with differntial transcript usage plots\")), mdx(\"h2\", {\n    \"id\": \"useful-links\"\n  }, \"Useful links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.nextflow.io/\"\n  }, \"nextflow\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.docker.com/products/docker-desktop\"\n  }, \"docker\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://sylabs.io/singularity/\"\n  }, \"Singularity\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.conda.io/en/latest/miniconda.html\"\n  }, \"conda\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/isovic/racon\"\n  }, \"racon\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/rvaser/spoa\"\n  }, \"spoa\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ksahlin/isONclust\"\n  }, \"inONclust\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/nanoporetech/isONclust2\"\n  }, \"isONclust2\"))));\n}\n;\nMDXContent.isMDXComponent = true;","keywords":["epi2melabs","nanopore sequencing"],"tags":null,"thumbnail":null},"categoryPosts":{"nodes":[{"id":"f0fcbedf-596d-59f0-b5a5-d67f80e0943c","title":"ONT Open Datasets","slug":"/dataindex/","link":null,"excerpt":"The Oxford Nanopore Technologies Open Data (ont-open-data) provides reference sequencing data fromâ€¦","timeToRead":1,"featured":true,"thumbnailText":null,"date":"September 01, 2020","category":null,"author":null,"thumbnail":{"__typename":"ImageSharp","ImageSharp_vertical":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/d625388ba09b90e0b9b8a67a5e80bdb7/144fe/thumbnail.jpg","srcSet":"/static/d625388ba09b90e0b9b8a67a5e80bdb7/9d7b9/thumbnail.jpg 190w,\n/static/d625388ba09b90e0b9b8a67a5e80bdb7/144fe/thumbnail.jpg 380w","sizes":"(min-width: 380px) 380px, 100vw"},"sources":[{"srcSet":"/static/d625388ba09b90e0b9b8a67a5e80bdb7/228d6/thumbnail.webp 190w,\n/static/d625388ba09b90e0b9b8a67a5e80bdb7/6b99c/thumbnail.webp 380w","type":"image/webp","sizes":"(min-width: 380px) 380px, 100vw"}]},"width":380,"height":290},"ImageSharp_hero":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/d625388ba09b90e0b9b8a67a5e80bdb7/5e493/thumbnail.jpg","srcSet":"/static/d625388ba09b90e0b9b8a67a5e80bdb7/696c0/thumbnail.jpg 800w,\n/static/d625388ba09b90e0b9b8a67a5e80bdb7/5e493/thumbnail.jpg 1600w","sizes":"(min-width: 1600px) 1600px, 100vw"},"sources":[{"srcSet":"/static/d625388ba09b90e0b9b8a67a5e80bdb7/c9f06/thumbnail.webp 800w,\n/static/d625388ba09b90e0b9b8a67a5e80bdb7/f47df/thumbnail.webp 1600w","type":"image/webp","sizes":"(min-width: 1600px) 1600px, 100vw"}]},"width":1600,"height":650}}},{"id":"d6c7aa9c-237d-52f9-b696-6431da1dc2ed","title":"EPI2ME Labs Tutorials","slug":"/nbindex/","link":null,"excerpt":"EPI2ME Labs extends the JupyterLab notebook framework with a pre-configured\nanalysis environmentâ€¦","timeToRead":2,"featured":true,"thumbnailText":null,"date":"September 01, 2020","category":null,"author":null,"thumbnail":{"__typename":"ImageSharp","ImageSharp_vertical":{"layout":"constrained","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/static/d5f2779e5a84bf92e5d939ed7cc9b20e/144fe/thumbnail.jpg","srcSet":"/static/d5f2779e5a84bf92e5d939ed7cc9b20e/9d7b9/thumbnail.jpg 190w,\n/static/d5f2779e5a84bf92e5d939ed7cc9b20e/144fe/thumbnail.jpg 380w","sizes":"(min-width: 380px) 380px, 100vw"},"sources":[{"srcSet":"/static/d5f2779e5a84bf92e5d939ed7cc9b20e/228d6/thumbnail.webp 190w,\n/static/d5f2779e5a84bf92e5d939ed7cc9b20e/6b99c/thumbnail.webp 380w","type":"image/webp","sizes":"(min-width: 380px) 380px, 100vw"}]},"width":380,"height":290},"ImageSharp_hero":{"layout":"constrained","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/static/d5f2779e5a84bf92e5d939ed7cc9b20e/5e493/thumbnail.jpg","srcSet":"/static/d5f2779e5a84bf92e5d939ed7cc9b20e/696c0/thumbnail.jpg 800w,\n/static/d5f2779e5a84bf92e5d939ed7cc9b20e/5e493/thumbnail.jpg 1600w","sizes":"(min-width: 1600px) 1600px, 100vw"},"sources":[{"srcSet":"/static/d5f2779e5a84bf92e5d939ed7cc9b20e/c9f06/thumbnail.webp 800w,\n/static/d5f2779e5a84bf92e5d939ed7cc9b20e/f47df/thumbnail.webp 1600w","type":"image/webp","sizes":"(min-width: 1600px) 1600px, 100vw"}]},"width":1600,"height":650}}},{"id":"7d1c9ffa-3a35-56b6-8813-888ae52f6981","title":"EPI2ME Labs Workflows","slug":"/wfindex/","link":null,"excerpt":"EPI2ME Labs maintains a collection of  Nextflow  bioinformatics\nworkflows tailored to Oxfordâ€¦","timeToRead":2,"featured":true,"thumbnailText":null,"date":"September 01, 2020","category":null,"author":null,"thumbnail":{"__typename":"ImageSharp","ImageSharp_vertical":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/7b955fd3bff78ff21f10b5769a188346/144fe/thumbnail.jpg","srcSet":"/static/7b955fd3bff78ff21f10b5769a188346/9d7b9/thumbnail.jpg 190w,\n/static/7b955fd3bff78ff21f10b5769a188346/144fe/thumbnail.jpg 380w","sizes":"(min-width: 380px) 380px, 100vw"},"sources":[{"srcSet":"/static/7b955fd3bff78ff21f10b5769a188346/228d6/thumbnail.webp 190w,\n/static/7b955fd3bff78ff21f10b5769a188346/6b99c/thumbnail.webp 380w","type":"image/webp","sizes":"(min-width: 380px) 380px, 100vw"}]},"width":380,"height":290},"ImageSharp_hero":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/7b955fd3bff78ff21f10b5769a188346/5e493/thumbnail.jpg","srcSet":"/static/7b955fd3bff78ff21f10b5769a188346/696c0/thumbnail.jpg 800w,\n/static/7b955fd3bff78ff21f10b5769a188346/5e493/thumbnail.jpg 1600w","sizes":"(min-width: 1600px) 1600px, 100vw"},"sources":[{"srcSet":"/static/7b955fd3bff78ff21f10b5769a188346/c9f06/thumbnail.webp 800w,\n/static/7b955fd3bff78ff21f10b5769a188346/f47df/thumbnail.webp 1600w","type":"image/webp","sizes":"(min-width: 1600px) 1600px, 100vw"}]},"width":1600,"height":650}}}]},"previous":{"id":"0e6e2aa4-88b7-558e-8532-066e85165416","slug":"/progressive-kraken2/","title":"Real-time bioinformatics with Nextflow and Kraken2"},"next":{"id":"60f825ab-2f7d-582f-bec3-e56e8d26ac21","slug":"/workflows/wf-transcript-target/","title":"wf-transcript-target documentation"}},"pageContext":{"id":"3c9aed23-1c59-512c-aaf1-a028dddc296d","categoryId":null,"tagsIds":[],"hasTags":false,"previousId":"0e6e2aa4-88b7-558e-8532-066e85165416","nextId":"60f825ab-2f7d-582f-bec3-e56e8d26ac21","paginatePostsPage":true,"basePath":"/","services":{"algolia":true,"mailchimp":false,"disqus":false,"graphComment":false,"facebookComment":false},"siteUrl":"https://labs.epi2me.io","mobileMenu":{"title":"Topics","items":[{"name":"Announcements","slug":"/category/announcements/"},{"name":"Articles","slug":"/category/articles/"},{"name":"Data Releases","slug":"/category/data-releases/"},{"name":"How Tos","slug":"/category/how-tos/"},{"name":"Software Releases","slug":"/category/software-releases/"}]},"darkMode":true,"includeExcerpt":true,"includeTimeToRead":true,"includeTableOfContents":true,"imageQuality":75}},
    "staticQueryHashes": ["1992822086","2409295108","2893703372","3667468360"]}